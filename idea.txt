# **Phase 2: System Design (Detailed Technical Guide)**
## **Building a Ticketing System with Django (Backend) + React Native (Frontend) + Tailwind CSS**  

This guide provides a **step-by-step technical breakdown** of **Phase 2 (System Design)** for a ticketing system using:  
- **Backend**: Django (Python) + Django REST Framework (DRF)  
- **Frontend**: React Native (Expo) + Tailwind CSS (via `nativewind`)  
- **Database**: PostgreSQL  
- **Auth**: JWT (SimpleJWT)  

---

## **Step 1: System Architecture Overview**
### **High-Level Design**
```
┌─────────────────┐    ┌─────────────────┐    ┌─────────────────┐
│ React Native    │ ←→ │ Django REST API │ ←→ │ PostgreSQL      │
│ (Expo + Tailwind│    │ (DRF + JWT)     │    │ (Database)      │
└─────────────────┘    └─────────────────┘    └─────────────────┘
       ↑
       │ (Mobile/Web)
       ↓
┌─────────────────┐
│ Firebase/SendGrid│ (Notifications)
└─────────────────┘
```

---

## **Step 2: Backend (Django) Setup**
### **1. Initialize Django Project**
```bash
# Create virtual environment
python -m venv venv
source venv/bin/activate  # (Linux/Mac) | venv\Scripts\activate (Windows)

# Install Django & DRF
pip install django djangorestframework django-rest-framework-simplejwt psycopg2-binary

# Start project
django-admin startproject ticketing_system
cd ticketing_system
python manage.py startapp tickets
```

### **2. Configure `settings.py`**
```python
# ticketing_system/settings.py

INSTALLED_APPS = [
    ...,
    'rest_framework',
    'rest_framework_simplejwt',
    'tickets',
]

# Database (PostgreSQL)
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'ticketing_db',
        'USER': 'postgres',
        'PASSWORD': 'yourpassword',
        'HOST': 'localhost',
        'PORT': '5432',
    }
}

# JWT Authentication
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    )
}
```

### **3. Define Models (`models.py`)**
```python
# tickets/models.py
from django.db import models
from django.contrib.auth.models import User

class Ticket(models.Model):
    STATUS_CHOICES = [
        ('Open', 'Open'),
        ('In Progress', 'In Progress'),
        ('Resolved', 'Resolved'),
        ('Closed', 'Closed'),
    ]
    PRIORITY_CHOICES = [
        ('Low', 'Low'),
        ('Medium', 'Medium'),
        ('High', 'High'),
    ]

    title = models.CharField(max_length=200)
    description = models.TextField()
    status = models.CharField(max_length=20, choices=STATUS_CHOICES, default='Open')
    priority = models.CharField(max_length=20, choices=PRIORITY_CHOICES, default='Medium')
    created_by = models.ForeignKey(User, on_delete=models.CASCADE, related_name='created_tickets')
    assigned_to = models.ForeignKey(User, on_delete=models.SET_NULL, null=True, related_name='assigned_tickets')
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

class Comment(models.Model):
    ticket = models.ForeignKey(Ticket, on_delete=models.CASCADE, related_name='comments')
    author = models.ForeignKey(User, on_delete=models.CASCADE)
    text = models.TextField()
    created_at = models.DateTimeField(auto_now_add=True)
```

### **4. Create Serializers (`serializers.py`)**
```python
# tickets/serializers.py
from rest_framework import serializers
from .models import Ticket, Comment
from django.contrib.auth.models import User

class UserSerializer(serializers.ModelSerializer):
    class Meta:
        model = User
        fields = ['id', 'username', 'email']

class CommentSerializer(serializers.ModelSerializer):
    author = UserSerializer(read_only=True)
    class Meta:
        model = Comment
        fields = '__all__'

class TicketSerializer(serializers.ModelSerializer):
    created_by = UserSerializer(read_only=True)
    assigned_to = UserSerializer(read_only=True)
    comments = CommentSerializer(many=True, read_only=True)
    
    class Meta:
        model = Ticket
        fields = '__all__'
```

### **5. Build Views (`views.py`)**
```python
# tickets/views.py
from rest_framework import viewsets, permissions
from .models import Ticket, Comment
from .serializers import TicketSerializer, CommentSerializer
from rest_framework_simplejwt.authentication import JWTAuthentication

class TicketViewSet(viewsets.ModelViewSet):
    queryset = Ticket.objects.all()
    serializer_class = TicketSerializer
    authentication_classes = [JWTAuthentication]
    permission_classes = [permissions.IsAuthenticated]

    def perform_create(self, serializer):
        serializer.save(created_by=self.request.user)

class CommentViewSet(viewsets.ModelViewSet):
    queryset = Comment.objects.all()
    serializer_class = CommentSerializer
    authentication_classes = [JWTAuthentication]
    permission_classes = [permissions.IsAuthenticated]

    def perform_create(self, serializer):
        serializer.save(author=self.request.user)
```

### **6. Set Up URLs (`urls.py`)**
```python
# tickets/urls.py
from django.urls import path, include
from rest_framework.routers import DefaultRouter
from .views import TicketViewSet, CommentViewSet

router = DefaultRouter()
router.register(r'tickets', TicketViewSet)
router.register(r'comments', CommentViewSet)

urlpatterns = [
    path('', include(router.urls)),
]

# ticketing_system/urls.py
from django.contrib import admin
from django.urls import path, include

urlpatterns = [
    path('admin/', admin.site.urls),
    path('api/', include('tickets.urls')),
    path('api/auth/', include('rest_framework.urls')),
]
```

### **7. Run Migrations & Test API**
```bash
python manage.py makemigrations
python manage.py migrate
python manage.py createsuperuser  # Create admin user
python manage.py runserver
```
- Test API at `http://localhost:8000/api/tickets/` (Use Postman/Thunder Client).

---

## **Step 3: Frontend (React Native + Tailwind CSS) Setup**
### **1. Initialize React Native (Expo)**
```bash
npx create-expo-app ticketing-app
cd ticketing-app
npx expo install react-native-web@~0.19.6 react-dom@18.2.0 @expo/webpack-config@^19.0.0
npm install @react-navigation/native @react-navigation/stack
npm install axios  # For API calls
npm install nativewind  # Tailwind CSS for React Native
npm install @react-native-async-storage/async-storage  # For JWT storage
```

### **2. Configure `nativewind` (Tailwind)**
Update `babel.config.js`:
```js
module.exports = function (api) {
  api.cache(true);
  return {
    presets: ['babel-preset-expo'],
    plugins: ["nativewind/babel"],
  };
};
```

### **3. Create API Service (`api.js`)**
```js
// src/services/api.js
import axios from 'axios';

const API_URL = 'http://localhost:8000/api';

export const getTickets = async (token) => {
  const response = await axios.get(`${API_URL}/tickets/`, {
    headers: { Authorization: `Bearer ${token}` },
  });
  return response.data;
};

export const createTicket = async (ticketData, token) => {
  const response = await axios.post(`${API_URL}/tickets/`, ticketData, {
    headers: { Authorization: `Bearer ${token}` },
  });
  return response.data;
};
```

### **4. Build Screens (Example: `TicketList.js`)**
```jsx
// src/screens/TicketList.js
import React, { useEffect, useState } from 'react';
import { View, Text, FlatList, TouchableOpacity } from 'react-native';
import { getTickets } from '../services/api';
import { useAuth } from '../context/AuthContext';

export default function TicketList() {
  const [tickets, setTickets] = useState([]);
  const { userToken } = useAuth();

  useEffect(() => {
    const fetchTickets = async () => {
      const data = await getTickets(userToken);
      setTickets(data);
    };
    fetchTickets();
  }, []);

  return (
    <View className="p-4">
      <Text className="text-xl font-bold mb-4">Tickets</Text>
      <FlatList
        data={tickets}
        keyExtractor={(item) => item.id.toString()}
        renderItem={({ item }) => (
          <TouchableOpacity className="p-4 border-b border-gray-200">
            <Text className="font-bold">{item.title}</Text>
            <Text>{item.status}</Text>
          </TouchableOpacity>
        )}
      />
    </View>
  );
}
```

---

## **Step 4: Connect Frontend to Backend**
### **1. Set Up JWT Authentication**
- Use `axios` to send requests with `Authorization: Bearer <token>`.  
- Store JWT token in `AsyncStorage`.  

### **2. Test API Calls**
- Use Postman to verify:  
  - `POST /api/tickets/` (Create ticket)  
  - `GET /api/tickets/` (List tickets)  

---

## **Step 5: Database Schema (PostgreSQL)**
### **Final ER Diagram**
```
┌───────────┐       ┌───────────┐       ┌───────────┐
│  User     │       │  Ticket   │       │  Comment  │
├───────────┤       ├───────────┤       ├───────────┤
│ id (PK)   │←─────→│ id (PK)   │←─────→│ id (PK)   │
│ username  │       │ title     │       │ text      │
│ email     │       │ status    │       │ created_at│
│ password  │       │ priority  │       └───────────┘
└───────────┘       │ created_by│
                    │ assigned_to│
                    └───────────┘
```

---

## **Next Steps**
1. **Implement Authentication** (Login/Register screens).  
2. **Add Real-Time Updates** (WebSockets with Django Channels).  
3. **Deploy Backend** (AWS/GCP).  
4. **Build Mobile App** (Expo EAS for iOS/Android).  

Would you like a **deep dive** into any specific part (e.g., JWT auth, WebSockets)? 🚀

# Frontend 
# Modern Authentication System with Django, React & TailwindCSS

I'll guide you through creating a complete, visually appealing authentication system with these technologies. This solution includes user registration, login, password reset, and profile management.

## System Architecture

```
auth-system/
├── backend/ (Django)
│   ├── accounts/ (custom user app)
│   └── backend/ (project config)
└── frontend/ (React)
    ├── public/
    └── src/
        ├── api/ (API calls)
        ├── components/ (UI components)
        ├── context/ (auth context)
        └── pages/ (route pages)
```

## Part 1: Django Backend Setup

### 1. Initialize Project

```bash
# Create project directory
mkdir auth-system && cd auth-system

# Set up virtual environment
python -m venv venv
source venv/bin/activate  # Windows: venv\Scripts\activate

# Install dependencies
pip install django djangorestframework djangorestframework-simplejwt python-dotenv pillow corsheaders
```

### 2. Create Django Project & App

```bash
django-admin startproject backend
cd backend
python manage.py startapp accounts
```

### 3. Configure Settings (backend/settings.py)

```python
# Add to INSTALLED_APPS
INSTALLED_APPS = [
    ...
    'rest_framework',
    'rest_framework_simplejwt',
    'corsheaders',
    'accounts',
]

# Middleware
MIDDLEWARE = [
    ...
    'corsheaders.middleware.CorsMiddleware',
]

# Authentication
AUTH_USER_MODEL = 'accounts.CustomUser'

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    )
}

# CORS (adjust for production)
CORS_ALLOW_ALL_ORIGINS = True
CORS_ALLOW_CREDENTIALS = True

# JWT Settings
from datetime import timedelta
SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=30),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=1),
    'ROTATE_REFRESH_TOKENS': True,
    'BLACKLIST_AFTER_ROTATION': True,
}
```

### 4. Custom User Model (accounts/models.py)

```python
from django.contrib.auth.models import AbstractUser
from django.db import models

class CustomUser(AbstractUser):
    email = models.EmailField(unique=True)
    profile_picture = models.ImageField(upload_to='profiles/', null=True, blank=True)
    bio = models.TextField(max_length=500, blank=True)
    
    USERNAME_FIELD = 'email'
    REQUIRED_FIELDS = ['username']

    def __str__(self):
        return self.email
```

### 5. Serializers (accounts/serializers.py)

```python
from rest_framework import serializers
from django.contrib.auth import get_user_model
from rest_framework_simplejwt.serializers import TokenObtainPairSerializer

User = get_user_model()

class UserSerializer(serializers.ModelSerializer):
    class Meta:
        model = User
        fields = ['id', 'email', 'username', 'profile_picture', 'bio']
        extra_kwargs = {'password': {'write_only': True}}

    def create(self, validated_data):
        user = User.objects.create_user(
            email=validated_data['email'],
            username=validated_data['username'],
            password=validated_data['password']
        )
        return user

class CustomTokenObtainPairSerializer(TokenObtainPairSerializer):
    @classmethod
    def get_token(cls, user):
        token = super().get_token(user)
        token['email'] = user.email
        token['username'] = user.username
        return token
```

### 6. Views (accounts/views.py)

```python
from rest_framework import generics, permissions, status
from rest_framework.response import Response
from rest_framework_simplejwt.views import TokenObtainPairView
from .serializers import UserSerializer, CustomTokenObtainPairSerializer
from django.contrib.auth import get_user_model

User = get_user_model()

class RegisterView(generics.CreateAPIView):
    queryset = User.objects.all()
    serializer_class = UserSerializer
    permission_classes = [permissions.AllowAny]

class LoginView(TokenObtainPairView):
    serializer_class = CustomTokenObtainPairSerializer

class ProfileView(generics.RetrieveUpdateAPIView):
    serializer_class = UserSerializer
    permission_classes = [permissions.IsAuthenticated]

    def get_object(self):
        return self.request.user
```

### 7. URLs (accounts/urls.py)

```python
from django.urls import path
from rest_framework_simplejwt.views import TokenRefreshView
from .views import RegisterView, LoginView, ProfileView

urlpatterns = [
    path('register/', RegisterView.as_view(), name='register'),
    path('login/', LoginView.as_view(), name='login'),
    path('token/refresh/', TokenRefreshView.as_view(), name='token_refresh'),
    path('profile/', ProfileView.as_view(), name='profile'),
]
```

## Part 2: React Frontend with TailwindCSS

### 1. Initialize React App

```bash
# From project root
npx create-react-app frontend
cd frontend

# Install dependencies
npm install axios react-router-dom @heroicons/react @tailwindcss/forms
npm install -D tailwindcss postcss autoprefixer
npx tailwindcss init -p
```

### 2. Configure Tailwind (tailwind.config.js)

```javascript
module.exports = {
  content: [
    "./src/**/*.{js,jsx,ts,tsx}",
  ],
  theme: {
    extend: {
      colors: {
        primary: {
          500: '#6366f1',
          600: '#4f46e5',
        },
      },
    },
  },
  plugins: [
    require('@tailwindcss/forms'),
  ],
}
```

### 3. Auth Context (src/context/AuthContext.js)

```javascript
import { createContext, useContext, useState, useEffect } from 'react'
import { useNavigate } from 'react-router-dom'
import authApi from '../api/auth'

const AuthContext = createContext()

export const AuthProvider = ({ children }) => {
  const [user, setUser] = useState(null)
  const [isAuthenticated, setIsAuthenticated] = useState(false)
  const [isLoading, setIsLoading] = useState(true)
  const navigate = useNavigate()

  useEffect(() => {
    const initializeAuth = async () => {
      const storedUser = JSON.parse(localStorage.getItem('user'))
      
      if (storedUser?.access) {
        try {
          const profile = await authApi.getProfile(storedUser.access)
          setUser({ ...storedUser, ...profile })
          setIsAuthenticated(true)
        } catch (error) {
          if (error.response?.status === 401 && storedUser.refresh) {
            try {
              const { access } = await authApi.refreshToken(storedUser.refresh)
              const newUser = { ...storedUser, access }
              localStorage.setItem('user', JSON.stringify(newUser))
              const profile = await authApi.getProfile(access)
              setUser({ ...newUser, ...profile })
              setIsAuthenticated(true)
            } catch {
              logout()
            }
          } else {
            logout()
          }
        }
      }
      setIsLoading(false)
    }

    initializeAuth()
  }, [])

  const login = async (credentials) => {
    try {
      const userData = await authApi.login(credentials)
      const profile = await authApi.getProfile(userData.access)
      setUser({ ...userData, ...profile })
      setIsAuthenticated(true)
      navigate('/dashboard')
      return true
    } catch (error) {
      return false
    }
  }

  const register = async (userData) => {
    try {
      await authApi.register(userData)
      navigate('/login')
      return true
    } catch (error) {
      return false
    }
  }

  const logout = () => {
    authApi.logout()
    setUser(null)
    setIsAuthenticated(false)
    navigate('/login')
  }

  return (
    <AuthContext.Provider value={{ user, isAuthenticated, isLoading, login, register, logout }}>
      {children}
    </AuthContext.Provider>
  )
}

export const useAuth = () => useContext(AuthContext)
```

### 4. API Client (src/api/auth.js)

```javascript
import axios from 'axios'

const API_URL = 'http://localhost:8000/api/auth'

const register = async (userData) => {
  const response = await axios.post(`${API_URL}/register/`, userData)
  return response.data
}

const login = async (credentials) => {
  const response = await axios.post(`${API_URL}/login/`, credentials)
  if (response.data.access) {
    localStorage.setItem('user', JSON.stringify(response.data))
  }
  return response.data
}

const logout = () => {
  localStorage.removeItem('user')
}

const getProfile = async (token) => {
  const config = {
    headers: { Authorization: `Bearer ${token}` }
  }
  const response = await axios.get(`${API_URL}/profile/`, config)
  return response.data
}

const refreshToken = async (refreshToken) => {
  const response = await axios.post(`${API_URL}/token/refresh/`, { refresh: refreshToken })
  return response.data
}

export default {
  register,
  login,
  logout,
  getProfile,
  refreshToken
}
```

### 5. Beautiful Login Page (src/pages/Login.js)

```javascript
import { useState } from 'react'
import { useAuth } from '../context/AuthContext'
import { Link, useNavigate } from 'react-router-dom'
import { EnvelopeIcon, LockClosedIcon } from '@heroicons/react/24/outline'

export default function Login() {
  const [email, setEmail] = useState('')
  const [password, setPassword] = useState('')
  const [error, setError] = useState('')
  const { login } = useAuth()
  const navigate = useNavigate()

  const handleSubmit = async (e) => {
    e.preventDefault()
    setError('')
    const success = await login({ email, password })
    if (!success) setError('Invalid credentials')
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 flex items-center justify-center p-4">
      <div className="bg-white rounded-2xl shadow-xl overflow-hidden w-full max-w-md">
        <div className="bg-indigo-600 py-6 px-8">
          <h2 className="text-2xl font-bold text-white text-center">Welcome Back</h2>
        </div>
        
        <div className="p-8">
          {error && (
            <div className="mb-4 p-3 bg-red-100 border border-red-400 text-red-700 rounded">
              {error}
            </div>
          )}
          
          <form onSubmit={handleSubmit} className="space-y-6">
            <div>
              <label htmlFor="email" className="block text-sm font-medium text-gray-700 mb-1">
                Email
              </label>
              <div className="relative rounded-md shadow-sm">
                <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                  <EnvelopeIcon className="h-5 w-5 text-gray-400" />
                </div>
                <input
                  id="email"
                  name="email"
                  type="email"
                  required
                  className="block w-full pl-10 pr-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-indigo-500 focus:border-indigo-500"
                  placeholder="you@example.com"
                  value={email}
                  onChange={(e) => setEmail(e.target.value)}
                />
              </div>
            </div>

            <div>
              <label htmlFor="password" className="block text-sm font-medium text-gray-700 mb-1">
                Password
              </label>
              <div className="relative rounded-md shadow-sm">
                <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                  <LockClosedIcon className="h-5 w-5 text-gray-400" />
                </div>
                <input
                  id="password"
                  name="password"
                  type="password"
                  required
                  className="block w-full pl-10 pr-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-indigo-500 focus:border-indigo-500"
                  placeholder="••••••••"
                  value={password}
                  onChange={(e) => setPassword(e.target.value)}
                />
              </div>
            </div>

            <div className="flex items-center justify-between">
              <div className="flex items-center">
                <input
                  id="remember-me"
                  name="remember-me"
                  type="checkbox"
                  className="h-4 w-4 text-indigo-600 focus:ring-indigo-500 border-gray-300 rounded"
                />
                <label htmlFor="remember-me" className="ml-2 block text-sm text-gray-700">
                  Remember me
                </label>
              </div>

              <div className="text-sm">
                <Link to="/forgot-password" className="font-medium text-indigo-600 hover:text-indigo-500">
                  Forgot password?
                </Link>
              </div>
            </div>

            <div>
              <button
                type="submit"
                className="w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
              >
                Sign in
              </button>
            </div>
          </form>

          <div className="mt-6">
            <div className="relative">
              <div className="absolute inset-0 flex items-center">
                <div className="w-full border-t border-gray-300" />
              </div>
              <div className="relative flex justify-center text-sm">
                <span className="px-2 bg-white text-gray-500">Or</span>
              </div>
            </div>

            <div className="mt-6">
              <p className="text-center text-sm text-gray-600">
                Don't have an account?{' '}
                <Link to="/register" className="font-medium text-indigo-600 hover:text-indigo-500">
                  Sign up
                </Link>
              </p>
            </div>
          </div>
        </div>
      </div>
    </div>
  )
}
```

### 6. Protected Route (src/components/ProtectedRoute.js)

```javascript
import { useAuth } from '../context/AuthContext'
import { Navigate, Outlet } from 'react-router-dom'

export default function ProtectedRoute() {
  const { isAuthenticated, isLoading } = useAuth()

  if (isLoading) {
    return <div className="flex justify-center items-center h-screen">Loading...</div>
  }

  return isAuthenticated ? <Outlet /> : <Navigate to="/login" replace />
}
```

### 7. App Router (src/App.js)

```javascript
import { BrowserRouter as Router, Routes, Route } from 'react-router-dom'
import { AuthProvider } from './context/AuthContext'
import ProtectedRoute from './components/ProtectedRoute'
import Login from './pages/Login'
import Register from './pages/Register'
import Dashboard from './pages/Dashboard'

function App() {
  return (
    <Router>
      <AuthProvider>
        <Routes>
          <Route path="/login" element={<Login />} />
          <Route path="/register" element={<Register />} />
          
          <Route element={<ProtectedRoute />}>
            <Route path="/" element={<Dashboard />} />
            <Route path="/dashboard" element={<Dashboard />} />
          </Route>
        </Routes>
      </AuthProvider>
    </Router>
  )
}

export default App
```

## Running the Application

1. **Start Django Backend**:
```bash
cd backend
python manage.py makemigrations
python manage.py migrate
python manage.py runserver
```

2. **Start React Frontend**:
```bash
cd ../frontend
npm start
```

## Key Features Implemented

1. **Secure JWT Authentication**:
   - Access and refresh tokens
   - Token rotation for enhanced security
   - Protected routes in React

2. **Modern UI with TailwindCSS**:
   - Clean, responsive design
   - Beautiful gradient backgrounds
   - Consistent color scheme

3. **Complete User Flow**:
   - Registration with email and password
   - Login with persistent sessions
   - Protected dashboard area

4. **Error Handling**:
   - Form validation feedback
   - Authentication error messages

## Next Steps to Enhance

1. Add password reset functionality
2. Implement email verification
3. Add social authentication (Google, Facebook)
4. Create profile management page
5. Add two-factor authentication

This system provides a solid foundation that you can extend with additional features as needed. The combination of Django's robust backend with React's interactive frontend and Tailwind's utility-first CSS creates a modern, secure, and visually appealing authentication system.



Database  - User 
            - role
            - username
            - email
            - password

          - Store
            - name 
            - admin
            - engineer (User)
            - location

          - Issue
            - store
            - title
            - description
            - priority
            - created_at
            - status
          
          - Resolutions
            - ticket_id
            - issue (Issue)
            - resolution_date

          - assignment
            - message
            - store


Work Flow for loggin in issues, Case one
          - engineer login -> clicks on log issue button -> input issue information ->save data -> sends email to RSNL -> app detect RSNL response -> retreives ticket id for the issue -> create a resolution record in db table
 

          
            
